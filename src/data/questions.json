[
    {
        "opponent": {
            "name": "BitBlaster",
            "avatar": "/avatar1.svg",
            "rating": 1380,
            "progress": 75
        },
        "problem": {
            "title": "Reverse Integer",
            "difficulty": "Medium",
            "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
            "constraints": [
                "-2^31 <= x <= 2^31 - 1"
            ],
            "examples": [
                {
                    "input": "x = 123",
                    "output": "321"
                },
                {
                    "input": "x = -123",
                    "output": "-321"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "LoopGuru",
            "avatar": "/avatar2.svg",
            "rating": 1420,
            "progress": 68
        },
        "problem": {
            "title": "Valid Parentheses",
            "difficulty": "Easy",
            "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
            "constraints": [
                "1 <= s.length <= 10^4",
                "s consists of parentheses only"
            ],
            "examples": [
                {
                    "input": "s = '()[]{}'",
                    "output": "true"
                },
                {
                    "input": "s = '(]'",
                    "output": "false"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "StackSmash",
            "avatar": "/avatar3.svg",
            "rating": 1602,
            "progress": 90
        },
        "problem": {
            "title": "Merge Two Sorted Lists",
            "difficulty": "Easy",
            "description": "Merge two sorted linked lists and return it as a new sorted list.",
            "constraints": [
                "The number of nodes in both lists is in the range [0, 50]",
                "-100 <= Node.val <= 100"
            ],
            "examples": [
                {
                    "input": "l1 = [1,2,4], l2 = [1,3,4]",
                    "output": "[1,1,2,3,4,4]"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "BinaryBoss",
            "avatar": "/avatar4.svg",
            "rating": 1700,
            "progress": 95
        },
        "problem": {
            "title": "Remove Duplicates from Sorted Array",
            "difficulty": "Easy",
            "description": "Remove the duplicates in-place such that each unique element appears only once and return the new length.",
            "constraints": [
                "1 <= nums.length <= 3 * 10^4",
                "-10^4 <= nums[i] <= 10^4",
                "nums is sorted in non-decreasing order."
            ],
            "examples": [
                {
                    "input": "nums = [1,1,2]",
                    "output": "2, nums = [1,2,_]"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "RecursionRider",
            "avatar": "/avatar5.svg",
            "rating": 1488,
            "progress": 60
        },
        "problem": {
            "title": "Maximum Subarray",
            "difficulty": "Medium",
            "description": "Find the contiguous subarray with the largest sum and return its sum.",
            "constraints": [
                "1 <= nums.length <= 10^5",
                "-10^4 <= nums[i] <= 10^4"
            ],
            "examples": [
                {
                    "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
                    "output": "6"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "GreedyGiant",
            "avatar": "/avatar6.svg",
            "rating": 1302,
            "progress": 52
        },
        "problem": {
            "title": "Climbing Stairs",
            "difficulty": "Easy",
            "description": "You are climbing a staircase. Each time you can either climb 1 or 2 steps. Count how many distinct ways to climb to the top.",
            "constraints": [
                "1 <= n <= 45"
            ],
            "examples": [
                {
                    "input": "n = 2",
                    "output": "2"
                },
                {
                    "input": "n = 3",
                    "output": "3"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "HeapHunter",
            "avatar": "/avatar7.svg",
            "rating": 1550,
            "progress": 78
        },
        "problem": {
            "title": "Implement strStr()",
            "difficulty": "Easy",
            "description": "Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
            "constraints": [
                "0 <= haystack.length, needle.length <= 5 * 10^4"
            ],
            "examples": [
                {
                    "input": "haystack = 'hello', needle = 'll'",
                    "output": "2"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "CodeCracker",
            "avatar": "/avatar8.svg",
            "rating": 1444,
            "progress": 83
        },
        "problem": {
            "title": "Search Insert Position",
            "difficulty": "Easy",
            "description": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if inserted in order.",
            "constraints": [
                "1 <= nums.length <= 10^4"
            ],
            "examples": [
                {
                    "input": "nums = [1,3,5,6], target = 5",
                    "output": "2"
                },
                {
                    "input": "nums = [1,3,5,6], target = 2",
                    "output": "1"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "ArrayArrow",
            "avatar": "/avatar9.svg",
            "rating": 1390,
            "progress": 67
        },
        "problem": {
            "title": "Count and Say",
            "difficulty": "Medium",
            "description": "Given an integer n, generate the nth term of the count-and-say sequence.",
            "constraints": [
                "1 <= n <= 30"
            ],
            "examples": [
                {
                    "input": "n = 4",
                    "output": "1211"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "TreeTracer",
            "avatar": "/avatar10.svg",
            "rating": 1580,
            "progress": 85
        },
        "problem": {
            "title": "Binary Tree Inorder Traversal",
            "difficulty": "Easy",
            "description": "Return the inorder traversal of a binary tree's nodes' values.",
            "constraints": [
                "The number of nodes in the tree is in the range [0, 100]",
                "-100 <= Node.val <= 100"
            ],
            "examples": [
                {
                    "input": "[1,null,2,3]",
                    "output": "[1,3,2]"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "BitBender",
            "avatar": "/avatar11.svg",
            "rating": 1435,
            "progress": 71
        },
        "problem": {
            "title": "Symmetric Tree",
            "difficulty": "Easy",
            "description": "Given a binary tree, check whether it is a mirror of itself.",
            "constraints": [
                "The number of nodes in the tree is in the range [0, 1000]",
                "-100 <= Node.val <= 100"
            ],
            "examples": [
                {
                    "input": "[1,2,2,3,4,4,3]",
                    "output": "true"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "GraphGoblin",
            "avatar": "/avatar12.svg",
            "rating": 1650,
            "progress": 80
        },
        "problem": {
            "title": "Valid Anagram",
            "difficulty": "Easy",
            "description": "Given two strings s and t, return true if t is an anagram of s.",
            "constraints": [
                "1 <= s.length, t.length <= 5 * 10^4",
                "s and t consist of lowercase English letters"
            ],
            "examples": [
                {
                    "input": "s = 'anagram', t = 'nagaram'",
                    "output": "true"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "CharCaster",
            "avatar": "/avatar13.svg",
            "rating": 1512,
            "progress": 66
        },
        "problem": {
            "title": "First Unique Character in a String",
            "difficulty": "Easy",
            "description": "Given a string, find the first non-repeating character and return its index. If none exists, return -1.",
            "constraints": [
                "1 <= s.length <= 10^5"
            ],
            "examples": [
                {
                    "input": "s = 'leetcode'",
                    "output": "0"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "MatrixMaster",
            "avatar": "/avatar14.svg",
            "rating": 1620,
            "progress": 88
        },
        "problem": {
            "title": "Rotate Image",
            "difficulty": "Medium",
            "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise) in-place.",
            "constraints": [
                "n == matrix.length == matrix[i].length",
                "1 <= n <= 20"
            ],
            "examples": [
                {
                    "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                    "output": "[[7,4,1],[8,5,2],[9,6,3]]"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "DPDynamo",
            "avatar": "/avatar15.svg",
            "rating": 1750,
            "progress": 91
        },
        "problem": {
            "title": "Coin Change",
            "difficulty": "Medium",
            "description": "Given coins of different denominations and a total amount, return the fewest number of coins needed to make up the amount.",
            "constraints": [
                "1 <= coins.length <= 12",
                "0 <= amount <= 10^4"
            ],
            "examples": [
                {
                    "input": "coins = [1,2,5], amount = 11",
                    "output": "3"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "StringSurfer",
            "avatar": "/avatar16.svg",
            "rating": 1400,
            "progress": 59
        },
        "problem": {
            "title": "Longest Common Prefix",
            "difficulty": "Easy",
            "description": "Write a function to find the longest common prefix string amongst an array of strings.",
            "constraints": [
                "1 <= strs.length <= 200",
                "0 <= strs[i].length <= 200"
            ],
            "examples": [
                {
                    "input": "strs = ['flower','flow','flight']",
                    "output": "'fl'"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "PrimePrism",
            "avatar": "/avatar17.svg",
            "rating": 1530,
            "progress": 70
        },
        "problem": {
            "title": "Count Primes",
            "difficulty": "Medium",
            "description": "Count the number of prime numbers less than a non-negative number, n.",
            "constraints": [
                "0 <= n <= 5 * 10^6"
            ],
            "examples": [
                {
                    "input": "n = 10",
                    "output": "4"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "DFSDevil",
            "avatar": "/avatar18.svg",
            "rating": 1685,
            "progress": 82
        },
        "problem": {
            "title": "Number of Islands",
            "difficulty": "Medium",
            "description": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands.",
            "constraints": [
                "m == grid.length",
                "n == grid[i].length",
                "1 <= m, n <= 300"
            ],
            "examples": [
                {
                    "input": "grid = [[\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\"]]",
                    "output": "3"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "SortSage",
            "avatar": "/avatar19.svg",
            "rating": 1590,
            "progress": 84
        },
        "problem": {
            "title": "Top K Frequent Elements",
            "difficulty": "Medium",
            "description": "Given an integer array nums and an integer k, return the k most frequent elements.",
            "constraints": [
                "1 <= nums.length <= 10^5",
                "k is in the range [1, the number of unique elements in the array]"
            ],
            "examples": [
                {
                    "input": "nums = [1,1,1,2,2,3], k = 2",
                    "output": "[1,2]"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "BitwiseBaron",
            "avatar": "/avatar20.svg",
            "rating": 1477,
            "progress": 73
        },
        "problem": {
            "title": "Single Number",
            "difficulty": "Easy",
            "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.",
            "constraints": [
                "1 <= nums.length <= 3 * 10^4",
                "-3 * 10^4 <= nums[i] <= 3 * 10^4"
            ],
            "examples": [
                {
                    "input": "nums = [2,2,1]",
                    "output": "1"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "SubsequenceSamurai",
            "avatar": "/avatar21.svg",
            "rating": 1722,
            "progress": 92
        },
        "problem": {
            "title": "Longest Increasing Subsequence",
            "difficulty": "Medium",
            "description": "Given an integer array, return the length of the longest increasing subsequence.",
            "constraints": [
                "1 <= nums.length <= 2500",
                "-10^4 <= nums[i] <= 10^4"
            ],
            "examples": [
                {
                    "input": "nums = [10,9,2,5,3,7,101,18]",
                    "output": "4"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "HashHacker",
            "avatar": "/avatar22.svg",
            "rating": 1545,
            "progress": 74
        },
        "problem": {
            "title": "Isomorphic Strings",
            "difficulty": "Easy",
            "description": "Given two strings s and t, determine if they are isomorphic.",
            "constraints": [
                "1 <= s.length, t.length <= 5 * 10^4",
                "s and t consist of any printable ascii character"
            ],
            "examples": [
                {
                    "input": "s = 'egg', t = 'add'",
                    "output": "true"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "QueueQuester",
            "avatar": "/avatar23.svg",
            "rating": 1601,
            "progress": 87
        },
        "problem": {
            "title": "Moving Average from Data Stream",
            "difficulty": "Easy",
            "description": "Given a stream of integers and a window size, compute the moving average of all integers in the sliding window.",
            "constraints": [
                "1 <= size <= 10^4",
                "-10^5 <= val <= 10^5"
            ],
            "examples": [
                {
                    "input": "size = 3, inputs = [1,10,3,5]",
                    "output": "[1.0, 5.5, 4.67]"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "CycleCyclops",
            "avatar": "/avatar24.svg",
            "rating": 1633,
            "progress": 86
        },
        "problem": {
            "title": "Linked List Cycle",
            "difficulty": "Easy",
            "description": "Given a linked list, determine if it has a cycle in it.",
            "constraints": [
                "The number of the nodes in the list is in the range [0, 10^4]",
                "-10^5 <= Node.val <= 10^5"
            ],
            "examples": [
                {
                    "input": "head = [3,2,0,-4], pos = 1",
                    "output": "true"
                }
            ]
        }
    },
    {
        "opponent": {
            "name": "SortSlinger",
            "avatar": "/avatar25.svg",
            "rating": 1587,
            "progress": 80
        },
        "problem": {
            "title": "Merge Intervals",
            "difficulty": "Medium",
            "description": "Given an array of intervals where intervals[i] = [start_i, end_i], merge all overlapping intervals.",
            "constraints": [
                "1 <= intervals.length <= 10^4"
            ],
            "examples": [
                {
                    "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
                    "output": "[[1,6],[8,10],[15,18]]"
                }
            ]
        }
    }
]