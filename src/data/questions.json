[
    {
      "opponent": {
        "name": "BitBlaster",
        "avatar": "/avatar1.svg",
        "rating": 1380,
        "progress": 75
      },
      "problem": {
        "title": "Reverse Integer",
        "difficulty": "Medium",
        "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
        "constraints": [
          "-2^31 <= x <= 2^31 - 1"
        ],
        "examples": [
          {
            "input": "x = 123",
            "output": "321"
          },
          {
            "input": "x = -123",
            "output": "-321"
          }
        ],
        "testCases": [
          {
            "input": 123,
            "expected": 321,
            "edgeCase": false
          },
          {
            "input": -123,
            "expected": -321,
            "edgeCase": false
          },
          {
            "input": 120,
            "expected": 21,
            "edgeCase": false
          },
          {
            "input": 0,
            "expected": 0,
            "edgeCase": true
          },
          {
            "input": 1534236469,
            "expected": 0,
            "edgeCase": true,
            "description": "32-bit integer overflow case"
          }
        ]
      }
    },
    {
      "opponent": {
        "name": "LoopGuru",
        "avatar": "/avatar2.svg",
        "rating": 1420,
        "progress": 68
      },
      "problem": {
        "title": "Valid Parentheses",
        "difficulty": "Easy",
        "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
        "constraints": [
          "1 <= s.length <= 10^4",
          "s consists of parentheses only"
        ],
        "examples": [
          {
            "input": "s = '()[]{}'",
            "output": "true"
          },
          {
            "input": "s = '(]'",
            "output": "false"
          }
        ],
        "testCases": [
          {
            "input": "()",
            "expected": true,
            "edgeCase": false
          },
          {
            "input": "()[]{}",
            "expected": true,
            "edgeCase": false
          },
          {
            "input": "(]",
            "expected": false,
            "edgeCase": false
          },
          {
            "input": "([)]",
            "expected": false,
            "edgeCase": false
          },
          {
            "input": "{[]}",
            "expected": true,
            "edgeCase": false
          },
          {
            "input": "",
            "expected": true,
            "edgeCase": true,
            "description": "Empty string case"
          },
          {
            "input": "(((((())))))",
            "expected": true,
            "edgeCase": true,
            "description": "Deeply nested case"
          }
        ]
      }
    },
    {
      "opponent": {
        "name": "StackSmash",
        "avatar": "/avatar3.svg",
        "rating": 1602,
        "progress": 90
      },
      "problem": {
        "title": "Merge Two Sorted Lists",
        "difficulty": "Easy",
        "description": "Merge two sorted linked lists and return it as a new sorted list.",
        "constraints": [
          "The number of nodes in both lists is in the range [0, 50]",
          "-100 <= Node.val <= 100"
        ],
        "examples": [
          {
            "input": "l1 = [1,2,4], l2 = [1,3,4]",
            "output": "[1,1,2,3,4,4]"
          }
        ],
        "testCases": [
          {
            "input": {
              "l1": [1,2,4],
              "l2": [1,3,4]
            },
            "expected": [1,1,2,3,4,4],
            "edgeCase": false
          },
          {
            "input": {
              "l1": [],
              "l2": []
            },
            "expected": [],
            "edgeCase": true,
            "description": "Empty lists case"
          },
          {
            "input": {
              "l1": [],
              "l2": [0]
            },
            "expected": [0],
            "edgeCase": true
          },
          {
            "input": {
              "l1": [5],
              "l2": [1,2,3]
            },
            "expected": [1,2,3,5],
            "edgeCase": false
          },
          {
            "input": {
              "l1": [-5,0,5],
              "l2": [-10,10]
            },
            "expected": [-10,-5,0,5,10],
            "edgeCase": false
          }
        ]
      }
    },
    {
      "opponent": {
        "name": "BinaryBoss",
        "avatar": "/avatar4.svg",
        "rating": 1700,
        "progress": 95
      },
      "problem": {
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": "Easy",
        "description": "Remove the duplicates in-place such that each unique element appears only once and return the new length.",
        "constraints": [
          "1 <= nums.length <= 3 * 10^4",
          "-10^4 <= nums[i] <= 10^4",
          "nums is sorted in non-decreasing order."
        ],
        "examples": [
          {
            "input": "nums = [1,1,2]",
            "output": "2, nums = [1,2,_]"
          }
        ],
        "testCases": [
          {
            "input": [1,1,2],
            "expected": {
              "length": 2,
              "array": [1,2]
            },
            "edgeCase": false
          },
          {
            "input": [0,0,1,1,1,2,2,3,3,4],
            "expected": {
              "length": 5,
              "array": [0,1,2,3,4]
            },
            "edgeCase": false
          },
          {
            "input": [],
            "expected": {
              "length": 0,
              "array": []
            },
            "edgeCase": true,
            "description": "Empty array case"
          },
          {
            "input": [1],
            "expected": {
              "length": 1,
              "array": [1]
            },
            "edgeCase": true
          },
          {
            "input": [1,1,1,1],
            "expected": {
              "length": 1,
              "array": [1]
            },
            "edgeCase": true,
            "description": "All duplicates case"
          }
        ]
      }
    }
  ]